@startuml
class Task {
+taskId : String
+taskName : String
+taskDescription : String
+taskStatus : String
}

interface UserRepository {
+save(user: User): User
+findById(userId: String): User
+delete(user: User): void
}

class TaskList {
+userId: String
+taskListName: String
-user: User
<<<<<<< HEAD
+getUserId(): String
  // Other getters and setters
}

class TaskListService {
  -userRepository: UserRepository
  +createTaskList(createTaskListRequest: CreateTaskListRequest): TaskList
  +updateTaskList(taskListId: String, createTaskListRequest: CreateTaskListRequest): TaskList
  +deleteTaskList(taskListId: String): boolean
  -transformToTaskList(taskListRecord: TaskListRecord): TaskList
getUserId(): String
}

interface TaskRepository {
+save(task: Task ): Task
+findById (taskId: String)
+deleteById(taskId : String): void
}
class TaskService {
-taskRepository : TaskRepository
+getAllTasks(): List<Task>
+getTaskById(taskId : String): Task
+createTask(task: Task): Task
+updateTask(taskId : String, updateTask: Task) : Task
+deleteTask(taskId: String):void
}

class TaskListController {
-taskListService: TaskListService
+createTaskList(createTaskListRequest: CreateTaskListRequest): ResponseEntity<TaskList>
<<<<<<< HEAD
+getTaskList(taskListId: String): ResponseEntity<TaskList>
+updateTaskList(taskListId: String, createTaskListRequest: CreateTaskListRequest): ResponseEntity<TaskList>
+deleteTaskList((taskListId: String): ResponseEntity<Void>
-transformToTaskListResponse(taskList: TaskList): TaskListResponse
  //more endpoints need to be added
}

interface TaskListRepository {
+save(taskListRecord: TaskListRecord): TaskListRecord
+findById(taskListId: String): TaskListRecord
+delete(taskListRecord: TaskListRecord): void
}
@enduml
}
